name: CI Pipeline

on:
  - push
  - pull_request

env:
  REGISTRY: k8scc01covidacr.azurecr.io

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Run Go Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m --out-format=colored-line-number
          github-token: ${{ secrets.GITHUB_TOKEN }}
          only-new-issues: false
          install-mode: binary

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          cache: false

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Run Unit Tests
        run: |
          echo "::group::ðŸ“¦ Unit Test Output"
          make test-unit
          echo "::endgroup::"

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage.out

  build-push:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          use: true
          install: true

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          tags: ${{ env.REGISTRY }}/namespace-cleaner:${{ github.sha }}
          push: true

      - name: Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/namespace-cleaner:${{ github.sha }}
          severity: "CRITICAL"
          ignore-unfixed: true
          exit-code: 1
          format: table
