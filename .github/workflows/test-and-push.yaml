---
name: CI Pipeline

on: [push, pull_request]

jobs:
  pre-build-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

      - name: Lint YAML Files
        run: |
          pip install yamllint
          yamllint .

      - name: Install yq
        run: |
          sudo apt-get update
          sudo apt-get install -y yq

  unit-tests:
    runs-on: ubuntu-latest
    needs: pre-build-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Clean Go cache
        run: |
          go clean -cache
          go clean -modcache
          sudo rm -rf /usr/local/go/pkg || true

      - name: Run unit tests
        run: make test-unit

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage.out
          flags: unittests

  integration-tests:
    runs-on: ubuntu-latest
    needs: [pre-build-checks, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Kind and kubectl
        run: |
          # Install Kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Create Kind cluster with custom config
        run: |
          kind create cluster --config - <<EOF
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            extraMounts:
            - hostPath: /var/run/docker.sock
              containerPath: /var/run/docker.sock
          EOF

      - name: Verify cluster access
        run: |
          kubectl cluster-info
          kubectl wait --for=condition=Ready nodes --all --timeout=120s
          kubectl get nodes -o wide

      - name: Build and load image
        run: |
          make docker-build
          kind load docker-image namespace-cleaner:test

      - name: Run integration tests with enhanced debugging
        run: |
          echo "=== Starting integration tests with enhanced debugging ==="

          # Show initial state of namespaces
          echo "Initial namespaces:"
          kubectl get ns --show-labels
          echo "Namespace details:"
          kubectl get ns -o yaml | yq '.items[].metadata | {"name": .name, "labels": .labels, "annotations": .annotations}'

          # Run tests with verbose output
          echo "Running integration tests..."
          make test-integration

          # Show final state of namespaces
          echo "Final namespaces:"
          kubectl get ns --show-labels
          echo "Namespace details:"
          kubectl get ns -o yaml | yq '.items[].metadata | {"name": .name, "labels": .labels, "annotations": .annotations}'

      - name: Debug on failure
        if: ${{ failure() }}
        run: |
          echo "=== DEBUGGING FAILURE ==="
          echo "Current namespaces with labels:"
          kubectl get ns --show-labels

          echo "Namespace details:"
          kubectl get ns -o yaml | yq '.items[].metadata | {"name": .name, "labels": .labels, "annotations": .annotations}'

          echo "All resources:"
          kubectl get all -A

          echo "Test pod details:"
          kubectl describe pod/testpod

          echo "Events:"
          kubectl get events --sort-by=.metadata.creationTimestamp -A

          echo "Namespace cleaner logs:"
          kubectl logs -l app=namespace-cleaner --all-containers=true --tail=100

  build-push:
    runs-on: ubuntu-latest
    needs: integration-tests
    env:
      REGISTRY_NAME: k8scc01covidacr
      LOCAL_REPO: localhost:5000
      TRIVY_VERSION: "v0.57.0"
      TRIVY_DATABASES: "ghcr.io/aquasecurity/trivy-db:2,public.ecr.aws/aquasecurity/trivy-db"
      TRIVY_JAVA_DATABASES: "ghcr.io/aquasecurity/trivy-java-db:1,public.ecr.aws/aquasecurity/trivy-java-db"
      TRIVY_MAX_RETRIES: 5
      TRIVY_RETRY_DELAY: 20
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push image locally
        id: build-image
        run: |
          docker build -f Dockerfile -t localhost:5000/namespace-cleaner:latest .
          docker push localhost:5000/namespace-cleaner:latest
          docker image prune

      - name: Scan image with Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin ${{ env.TRIVY_VERSION }}
          set +e
          for ((i=0; i<${{ env.TRIVY_MAX_RETRIES }}; i++)); do
            echo "Attempt $((i + 1)) of ${{ env.TRIVY_MAX_RETRIES }}..."
            trivy image \
              --db-repository ${{ env.TRIVY_DATABASES }} \
              --java-db-repository ${{ env.TRIVY_JAVA_DATABASES }} \
              localhost:5000/namespace-cleaner:latest \
              --severity CRITICAL \
              --exit-code 1 \
              --ignore-unfixed \
              --timeout 20m
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 0 ]; then
              echo "No CRITICAL vulnerabilities found"
              break
            elif [ $EXIT_CODE -eq 1 ]; then
              echo "CRITICAL vulnerabilities found!"
              exit 1
            elif [[ $i -lt $(( ${{ env.TRIVY_MAX_RETRIES }} - 1)) ]]; then
              echo "Retrying in ${{ env.TRIVY_RETRY_DELAY }} seconds..."
              sleep ${{ env.TRIVY_RETRY_DELAY }}
            else
              echo "Scan failed after ${{ env.TRIVY_MAX_RETRIES }} attempts. Exiting."
              exit 1
            fi
          done

      - name: Push image to ACR
        if: success()
        run: |
          docker pull localhost:5000/namespace-cleaner:latest
          docker tag localhost:5000/namespace-cleaner:latest ${{ env.REGISTRY_NAME }}.azurecr.io/namespace-cleaner:${{ github.sha }}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/namespace-cleaner:${{ github.sha }}
